buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "net.serenity-bdd:serenity-gradle-plugin:3.2.0"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
tasks.withType(Test) {
    systemProperty "file.encoding", "UTF-8"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'

// Configuraciones para Pruebas unitarias
sourceSets {
    unitTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/unit-test/java')
        }
        resources.srcDir file('src/unit-test/resources')
    }
}

configurations {
    unitTestCompile.extendsFrom testCompile
    unitTestRuntime.extendsFrom testRuntime
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

repositories {
    mavenCentral()
}

ext{
    serenityVersion = '3.2.0'
    servicesConectorVersion = '9.7.0'
    serenityCucumberVersion = '3.2.0'
    cucumberVersion = '7.2.3'
    assertCoreVersion='1.7.0'
    ojdbcVersion='7'
    junitVersion='4.13.2'
    hamcrestVersion='1.3'
    mockitoVersion='1.10.19'
    apacheVersion='3.11'
}

dependencies {
    implementation         "com.sura.bdd:services-conector:$rootProject.ext.servicesConectorVersion"
    implementation         "net.serenity-bdd:serenity-core:$rootProject.ext.serenityVersion"
    implementation         "net.serenity-bdd:serenity-cucumber:$rootProject.ext.serenityCucumberVersion"
    implementation          "org.assertj:assertj-core:$rootProject.ext.assertCoreVersion"
    implementation          "oracle:ojdbc:$rootProject.ext.ojdbcVersion"
    implementation          "org.apache.poi:poi-ooxml:$rootProject.ext.apacheVersion"
    testImplementation  "junit:junit:$rootProject.ext.junitVersion"
    testImplementation  "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    unitTestImplementation  "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
}

sonarqube {
    properties {
        property "sonar.projectKey", "BDDCoreSuraEmpresariales"
        property "sonar.projectName", "BDDCoreSuraEmpresariales"
        property "sonar.projectVersion", "1.0"
        property "sonar.sources", "src/main"
        property "sonar.java.binaries", "build"
        property "sonar.test", "src/test"
    }
}

test {
    maxParallelForks = Runtime.runtime.availableProcessors()
}

wrapper {
    gradleVersion = '7.0'
}

task icTest(type: Test) {
    def env = (System.getProperty('env') ?: "dllo").trim()
    def app = (System.getProperty('app') ?: "ejemplos").trim()
    def propertyValue = project.property("${app}TestFilter").toString().trim()
    def filterRute = "${propertyValue}.${env}.*"

    logger.lifecycle("Variables de ejecucion para icTest")
    logger.lifecycle("env:$env, app:$app, propertyValue:$propertyValue, filterRute:$filterRute")

    // Si ENV estï¿½ vacio se hace el set en el valor por defecto
    systemProperties = ['ENV': env]

    filter {
        includeTestsMatching filterRute
        failOnNoMatchingTests = false
    }
    maxParallelForks = Runtime.runtime.availableProcessors()
}

//compileJava.dependsOn 'googleJavaFormat'
compileJava.mustRunAfter 'sonarqube'
gradle.startParameter.continueOnFailure = true

tasks.withType(Test) {
    systemProperties = System.properties
}

task unitTest(type: Test) {
    testClassesDirs = sourceSets.unitTest.output.classesDirs
    classpath = sourceSets.unitTest.runtimeClasspath
    outputs.upToDateWhen { false }
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task installCerts(type:Exec){
    def java_home = System.getenv("JAVA_HOME")
    commandLine "\"${java_home}\\bin\\keytool.exe\"", '-importcert', '-v', '-noprompt', '-trustcacerts', '-storepass', 'changeit', '-keystore', "${java_home}\\jre\\lib\\security\\cacerts", '-file', "certs\\artifactory.cer", '-alias', "artifactory"
}

sourceCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'
gradle.startParameter.continueOnFailure = true